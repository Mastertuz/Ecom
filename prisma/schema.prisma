generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          String     @default("user")
  password      String     @default("")
  accounts      Account[]
  cartItems     CartItem[]
  orders        Order[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      Status      @default(ACTIVE)
  stock       Int         @default(1)
  category    Category    @default(SNEAKERS)
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  total      Float
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  discount    Int
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  description String?
  title       String?
}

enum Status {
  ACTIVE   @map("Активно")
  INACTIVE @map("Неактивно")
}

enum Category {
  SNEAKERS    @map("Кроссовки")
  POLO        @map("Поло")
  HOODIES     @map("Толстовки")
  SHOES       @map("Кеды")
  ACCESSORIES @map("Аксессуары")
}
